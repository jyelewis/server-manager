* written in node.js
	* multiple pages for different views however each page will then be socket driven
* initial datastore as a json flat file
* browser popup windows for log files
* easy to customise and create new template configuration pages
	* when making a new apps, select a template for that kind of thing
	* come preinstalled with templates for webapps, wordpress, static files
	* Templates will define the interface for creating and editing a <name> as well as responding to a set of data requests such as "name" and "running status" 
	* Templates will NOT define where the app data is stored (a path will be specified), API must be used for starting external processes
	* Templates will be given an abstracted socket to the client code
* API avalible for templates to start and stop processes/call system commands and monitor them
* Each app will have its own folder within /server/apps
	* Folder will contain
		* /approot
		* /logs
			* /stdout
			* /stderr
		* /keyfile - if nginx authentication is enabled
 
App templates objects:
	* Each app template will have a .js file which contains a description of the template as well as an app object to use for any apps of that template type
		* Attributes:
			* TemplateName
			* CanBuild - Should the build button be shown
		* methods within app object
			* load() - called when the server is started, ensure the app is running/not running correctly
			* start() - called when start is clicked (expected to set that app.status property)
			* stop() - similer to start (expected to set the app.status property)
			* restart() - calls start then stop by default, can be overwridden
			* build() - runs when build button is clicked

	* Each template will be passed an app object which contains setStatus function, current running status, directory url, port number
	* TEMPLATES MUST RUN DAEMONS VIA THE APP.RUNDAEMON COMMAND AND REGISTER FOR NGINX VIA THE APP.SERVERREGISTER() FUNCTIONS
	* ðŸ˜œ
